services:
  # Web API service
  web-api:
    build:
      context: ..
      dockerfile: web/Dockerfile.web
    container_name: vatsim-web-api
    restart: unless-stopped
    
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
      - APP_ENV=production
      - FLASK_ENV=production
      - GUNICORN_BIND=0.0.0.0:8080
    
    env_file:
      - ../env/.env
    
    volumes:
      - ./per_env/prod/logs:/app/web/per_env/prod/logs
      - ./per_env/prod/data:/app/web/per_env/prod/data
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.2'

    command: >
      gunicorn --bind ${GUNICORN_BIND:-0.0.0.0:8080}
               --workers ${GUNICORN_WORKERS:-2}
               --timeout ${GUNICORN_TIMEOUT:-120}
               --access-logfile '-'
               --error-logfile '-'
               'backend.app:app'
     
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    networks:
      - app-network

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: vatsim-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    
    # Environment file location - for runtime environment variables
    env_file:
      - ../env/.env
    
    depends_on:
      - web-api
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    networks:
      - app-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: vatsim-certbot
    restart: on-failure
    
    env_file:
      - ../env/.env
    
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    
    command: certonly --webroot -w /var/www/certbot --non-interactive --agree-tos --email ${SSL_EMAIL} -d ${DOMAIN_NAME} --staple-ocsp

networks:
  app-network:
    driver: bridge

volumes:
  certbot-conf:
  certbot-www: